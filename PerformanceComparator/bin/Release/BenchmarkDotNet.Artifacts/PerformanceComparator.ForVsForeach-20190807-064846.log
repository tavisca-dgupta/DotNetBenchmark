// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 2 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
BuildScript: C:\Users\dgupta\source\repos\PerformanceComparator\PerformanceComparator\bin\Release\5398729f-3505-4254-b16b-b6871c0576ae.bat
// ***** Done, took 00:00:02 (2.48 sec)   *****
// Found 2 benchmarks:
//   ForVsForeach.AddNumberInListUsingFor: DefaultJob
//   ForVsForeach.AddNumberInListUsingForeach: DefaultJob

Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)// **************************
// Benchmark: ForVsForeach.AddNumberInListUsingFor: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: C:\Users\dgupta\source\repos\PerformanceComparator\PerformanceComparator\bin\Release\5398729f-3505-4254-b16b-b6871c0576ae.exe --benchmarkName "PerformanceComparator.ForVsForeach.AddNumberInListUsingFor" --job "Default" --benchmarkId 0 in 
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.3416.0
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 359930.90 ns, 359.9309 us/op
WorkloadJitting  1: 1 op, 463862.32 ns, 463.8623 us/op

OverheadJitting  2: 16 op, 158632.16 ns, 9.9145 us/op
WorkloadJitting  2: 16 op, 170666.32 ns, 10.6666 us/op

WorkloadPilot    1: 16 op, 12034.16 ns, 752.1352 ns/op
WorkloadPilot    2: 32 op, 5470.07 ns, 170.9398 ns/op
WorkloadPilot    3: 64 op, 14586.87 ns, 227.9198 ns/op
WorkloadPilot    4: 128 op, 9116.79 ns, 71.2249 ns/op
WorkloadPilot    5: 256 op, 19327.60 ns, 75.4984 ns/op
WorkloadPilot    6: 512 op, 41207.89 ns, 80.4842 ns/op
WorkloadPilot    7: 1024 op, 118882.95 ns, 116.0966 ns/op
WorkloadPilot    8: 2048 op, 320911.04 ns, 156.6948 ns/op
WorkloadPilot    9: 4096 op, 583839.28 ns, 142.5389 ns/op
WorkloadPilot   10: 8192 op, 1170231.27 ns, 142.8505 ns/op
WorkloadPilot   11: 16384 op, 1928383.60 ns, 117.6992 ns/op
WorkloadPilot   12: 32768 op, 5090451.33 ns, 155.3482 ns/op
WorkloadPilot   13: 65536 op, 8943571.81 ns, 136.4681 ns/op
WorkloadPilot   14: 131072 op, 14044963.28 ns, 107.1546 ns/op
WorkloadPilot   15: 262144 op, 26883957.47 ns, 102.5542 ns/op
WorkloadPilot   16: 524288 op, 51424535.03 ns, 98.0845 ns/op
WorkloadPilot   17: 1048576 op, 99571766.10 ns, 94.9590 ns/op
WorkloadPilot   18: 2097152 op, 199734300.25 ns, 95.2407 ns/op
WorkloadPilot   19: 4194304 op, 403853776.89 ns, 96.2862 ns/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Collections.Generic.List`1.set_Capacity(Int32 value)
   at System.Collections.Generic.List`1.EnsureCapacity(Int32 min)
   at System.Collections.Generic.List`1.Add(T item)
   at PerformanceComparator.ForVsForeach.AddNumberInListUsingFor() in C:\Users\dgupta\source\repos\PerformanceComparator\PerformanceComparator\ForVsForeach.cs:line 27
   at BenchmarkDotNet.Autogenerated.Runnable_0.WorkloadActionUnroll(Int64 invokeCount)
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineStage.RunIteration(IterationMode mode, IterationStage stage, Int32 index, Int64 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EnginePilotStage.RunAuto()
   at BenchmarkDotNet.Engines.EnginePilotStage.Run()
   at BenchmarkDotNet.Engines.Engine.Run()
   at BenchmarkDotNet.Autogenerated.Runnable_0.Run(IHost host, String benchmarkName)
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args)
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ForVsForeach.AddNumberInListUsingForeach: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: C:\Users\dgupta\source\repos\PerformanceComparator\PerformanceComparator\bin\Release\5398729f-3505-4254-b16b-b6871c0576ae.exe --benchmarkName "PerformanceComparator.ForVsForeach.AddNumberInListUsingForeach" --job "Default" --benchmarkId 1 in 
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.3416.0
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 277150.44 ns, 277.1504 us/op
WorkloadJitting  1: 1 op, 692146.76 ns, 692.1468 us/op

OverheadJitting  2: 16 op, 158996.83 ns, 9.9373 us/op
WorkloadJitting  2: 16 op, 288455.26 ns, 18.0285 us/op

WorkloadPilot    1: 16 op, 13128.18 ns, 820.5112 ns/op
WorkloadPilot    2: 32 op, 8752.12 ns, 273.5037 ns/op
WorkloadPilot    3: 64 op, 12398.84 ns, 193.7318 ns/op
WorkloadPilot    4: 128 op, 22244.97 ns, 173.7888 ns/op
WorkloadPilot    5: 256 op, 41572.57 ns, 162.3928 ns/op
WorkloadPilot    6: 512 op, 93355.94 ns, 182.3358 ns/op
WorkloadPilot    7: 1024 op, 156079.46 ns, 152.4213 ns/op
WorkloadPilot    8: 2048 op, 339144.62 ns, 165.5980 ns/op
WorkloadPilot    9: 4096 op, 743200.79 ns, 181.4455 ns/op
WorkloadPilot   10: 8192 op, 1344908.98 ns, 164.1735 ns/op
WorkloadPilot   11: 16384 op, 2674501.76 ns, 163.2386 ns/op
WorkloadPilot   12: 32768 op, 5278986.56 ns, 161.1019 ns/op
WorkloadPilot   13: 65536 op, 9758612.91 ns, 148.9046 ns/op
WorkloadPilot   14: 131072 op, 19740040.18 ns, 150.6046 ns/op
WorkloadPilot   15: 262144 op, 38486714.83 ns, 146.8152 ns/op
WorkloadPilot   16: 524288 op, 74600146.67 ns, 142.2885 ns/op
WorkloadPilot   17: 1048576 op, 146918907.60 ns, 140.1128 ns/op
WorkloadPilot   18: 2097152 op, 283763761.34 ns, 135.3091 ns/op
WorkloadPilot   19: 4194304 op, 568614244.15 ns, 135.5682 ns/op

OverheadWarmup   1: 4194304 op, 8485544.23 ns, 2.0231 ns/op
OverheadWarmup   2: 4194304 op, 8375048.73 ns, 1.9968 ns/op
OverheadWarmup   3: 4194304 op, 8008918.41 ns, 1.9095 ns/op
OverheadWarmup   4: 4194304 op, 8162445.17 ns, 1.9461 ns/op
OverheadWarmup   5: 4194304 op, 8574524.11 ns, 2.0443 ns/op
OverheadWarmup   6: 4194304 op, 9446453.99 ns, 2.2522 ns/op
OverheadWarmup   7: 4194304 op, 7978650.66 ns, 1.9023 ns/op
OverheadWarmup   8: 4194304 op, 8489920.29 ns, 2.0242 ns/op
OverheadWarmup   9: 4194304 op, 8111391.14 ns, 1.9339 ns/op

OverheadActual   1: 4194304 op, 7759483.01 ns, 1.8500 ns/op
OverheadActual   2: 4194304 op, 7745625.49 ns, 1.8467 ns/op
OverheadActual   3: 4194304 op, 7797044.19 ns, 1.8590 ns/op
OverheadActual   4: 4194304 op, 8156245.75 ns, 1.9446 ns/op
OverheadActual   5: 4194304 op, 8156975.09 ns, 1.9448 ns/op
OverheadActual   6: 4194304 op, 8227721.39 ns, 1.9616 ns/op
OverheadActual   7: 4194304 op, 7891858.82 ns, 1.8816 ns/op
OverheadActual   8: 4194304 op, 7777351.92 ns, 1.8543 ns/op
OverheadActual   9: 4194304 op, 7789021.41 ns, 1.8570 ns/op
OverheadActual  10: 4194304 op, 7730309.28 ns, 1.8430 ns/op
OverheadActual  11: 4194304 op, 7946924.23 ns, 1.8947 ns/op
OverheadActual  12: 4194304 op, 7926137.95 ns, 1.8897 ns/op
OverheadActual  13: 4194304 op, 7542868.06 ns, 1.7984 ns/op
OverheadActual  14: 4194304 op, 8456005.83 ns, 2.0161 ns/op
OverheadActual  15: 4194304 op, 7801055.58 ns, 1.8599 ns/op


OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Collections.Generic.List`1.set_Capacity(Int32 value)
   at System.Collections.Generic.List`1.EnsureCapacity(Int32 min)
   at System.Collections.Generic.List`1.Add(T item)
   at PerformanceComparator.ForVsForeach.AddNumberInListUsingForeach() in C:\Users\dgupta\source\repos\PerformanceComparator\PerformanceComparator\ForVsForeach.cs:line 37
   at BenchmarkDotNet.Autogenerated.Runnable_1.WorkloadActionUnroll(Int64 invokeCount)
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineStage.RunIteration(IterationMode mode, IterationStage stage, Int32 index, Int64 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineStage.Run(IStoppingCriteria criteria, Int64 invokeCount, IterationMode mode, IterationStage stage, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineWarmupStage.Run(Int64 invokeCount, IterationMode iterationMode, Int32 unrollFactor, RunStrategy runStrategy)
   at BenchmarkDotNet.Engines.Engine.Run()
   at BenchmarkDotNet.Autogenerated.Runnable_1.Run(IHost host, String benchmarkName)
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args)
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


Successfully reverted power plan (GUID: 381b4222-f694-41f0-9685-ff5bb260df2e FriendlyName: Balanced)
// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\PerformanceComparator.ForVsForeach-report.csv
  BenchmarkDotNet.Artifacts\results\PerformanceComparator.ForVsForeach-report-github.md
  BenchmarkDotNet.Artifacts\results\PerformanceComparator.ForVsForeach-report.html

// * Detailed results *
ForVsForeach.AddNumberInListUsingFor: DefaultJob
Runtime = ; GC = 
There are not any results runs

ForVsForeach.AddNumberInListUsingForeach: DefaultJob
Runtime = ; GC = 
There are not any results runs

// * Summary *

BenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.885 (1803/April2018Update/Redstone4)
Intel Core i7-6600U CPU 2.60GHz (Skylake), 1 CPU, 4 logical and 2 physical cores
Frequency=2742193 Hz, Resolution=364.6716 ns, Timer=TSC
  [Host] : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.3416.0


|                      Method | Mean | Error |
|---------------------------- |-----:|------:|
|     AddNumberInListUsingFor |   NA |    NA |
| AddNumberInListUsingForeach |   NA |    NA |

Benchmarks with issues:
  ForVsForeach.AddNumberInListUsingFor: DefaultJob
  ForVsForeach.AddNumberInListUsingForeach: DefaultJob

// * Warnings *
Environment
  Summary -> Detected error exit code from one of the benchmarks. It might be caused by following antivirus software:
        - McAfee Endpoint Security (C:\Program Files (x86)\McAfee\Endpoint Security\Threat Prevention\AMCFG.EXE)
        - Windows Defender (windowsdefender://)
Use InProcessToolchain to avoid new process creation.


// * Legends *
  Mean  : Arithmetic mean of all measurements
  Error : Half of 99.9% confidence interval
  1 ns  : 1 Nanosecond (0.000000001 sec)

// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:00:06 (6.8 sec), executed benchmarks: 2

Global total time: 00:00:09 (9.3 sec), executed benchmarks: 2
// * Artifacts cleanup *
